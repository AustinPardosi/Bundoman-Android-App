// Generated by view binder compiler. Do not edit!
package com.example.bundoman.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.bundoman.R;
import com.google.android.material.bottomnavigation.BottomNavigationView;
import com.google.android.material.navigationrail.NavigationRailView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityDashboardBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final BottomNavigationView bottomNavigationView;

  @NonNull
  public final FrameLayout frameLayout;

  @NonNull
  public final LinearLayout headerLayout;

  @NonNull
  public final TextView headerTextView;

  @NonNull
  public final ConstraintLayout main;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final NavigationRailView navigationRail;

  private ActivityDashboardBinding(@NonNull ConstraintLayout rootView,
      @Nullable BottomNavigationView bottomNavigationView, @NonNull FrameLayout frameLayout,
      @NonNull LinearLayout headerLayout, @NonNull TextView headerTextView,
      @NonNull ConstraintLayout main, @Nullable NavigationRailView navigationRail) {
    this.rootView = rootView;
    this.bottomNavigationView = bottomNavigationView;
    this.frameLayout = frameLayout;
    this.headerLayout = headerLayout;
    this.headerTextView = headerTextView;
    this.main = main;
    this.navigationRail = navigationRail;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityDashboardBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityDashboardBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_dashboard, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityDashboardBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bottomNavigationView;
      BottomNavigationView bottomNavigationView = ViewBindings.findChildViewById(rootView, id);

      id = R.id.frameLayout;
      FrameLayout frameLayout = ViewBindings.findChildViewById(rootView, id);
      if (frameLayout == null) {
        break missingId;
      }

      id = R.id.headerLayout;
      LinearLayout headerLayout = ViewBindings.findChildViewById(rootView, id);
      if (headerLayout == null) {
        break missingId;
      }

      id = R.id.headerTextView;
      TextView headerTextView = ViewBindings.findChildViewById(rootView, id);
      if (headerTextView == null) {
        break missingId;
      }

      ConstraintLayout main = (ConstraintLayout) rootView;

      id = R.id.navigation_rail;
      NavigationRailView navigationRail = ViewBindings.findChildViewById(rootView, id);

      return new ActivityDashboardBinding((ConstraintLayout) rootView, bottomNavigationView,
          frameLayout, headerLayout, headerTextView, main, navigationRail);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
