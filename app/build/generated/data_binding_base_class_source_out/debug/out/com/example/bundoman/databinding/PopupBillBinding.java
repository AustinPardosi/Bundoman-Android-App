// Generated by view binder compiler. Do not edit!
package com.example.bundoman.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.bundoman.R;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class PopupBillBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Spinner categoryScan;

  @NonNull
  public final RecyclerView itemList;

  @NonNull
  public final TextView itemListTitle;

  @NonNull
  public final TextInputLayout location;

  @NonNull
  public final TextInputEditText locationEditTextScan;

  @NonNull
  public final Button simpanBill;

  @NonNull
  public final Button ulangBill;

  private PopupBillBinding(@NonNull ConstraintLayout rootView, @NonNull Spinner categoryScan,
      @NonNull RecyclerView itemList, @NonNull TextView itemListTitle,
      @NonNull TextInputLayout location, @NonNull TextInputEditText locationEditTextScan,
      @NonNull Button simpanBill, @NonNull Button ulangBill) {
    this.rootView = rootView;
    this.categoryScan = categoryScan;
    this.itemList = itemList;
    this.itemListTitle = itemListTitle;
    this.location = location;
    this.locationEditTextScan = locationEditTextScan;
    this.simpanBill = simpanBill;
    this.ulangBill = ulangBill;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static PopupBillBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PopupBillBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.popup_bill, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PopupBillBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.category_scan;
      Spinner categoryScan = ViewBindings.findChildViewById(rootView, id);
      if (categoryScan == null) {
        break missingId;
      }

      id = R.id.itemList;
      RecyclerView itemList = ViewBindings.findChildViewById(rootView, id);
      if (itemList == null) {
        break missingId;
      }

      id = R.id.itemListTitle;
      TextView itemListTitle = ViewBindings.findChildViewById(rootView, id);
      if (itemListTitle == null) {
        break missingId;
      }

      id = R.id.location;
      TextInputLayout location = ViewBindings.findChildViewById(rootView, id);
      if (location == null) {
        break missingId;
      }

      id = R.id.location_edit_text_scan;
      TextInputEditText locationEditTextScan = ViewBindings.findChildViewById(rootView, id);
      if (locationEditTextScan == null) {
        break missingId;
      }

      id = R.id.simpanBill;
      Button simpanBill = ViewBindings.findChildViewById(rootView, id);
      if (simpanBill == null) {
        break missingId;
      }

      id = R.id.ulangBill;
      Button ulangBill = ViewBindings.findChildViewById(rootView, id);
      if (ulangBill == null) {
        break missingId;
      }

      return new PopupBillBinding((ConstraintLayout) rootView, categoryScan, itemList,
          itemListTitle, location, locationEditTextScan, simpanBill, ulangBill);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
